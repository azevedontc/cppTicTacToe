// cstdint standard header
#ifndef _CSTDINT_
#define _CSTDINT_
#include <yvals.h>

#ifdef _STD_USING
 #undef _STD_USING
  #include <stdint.h>
 #define _STD_USING

#else /* _STD_USING */
 #include <stdint.h>
#endif /* _STD_USING */

 #if _IS_GHS

 #if defined(__GHS_PRAGMAS)
  #pragma ghs start_cxx_lib_header
  #pragma ghs startdata
 #endif /* defined(__GHS_PRAGMAS) */

 #if defined(__ghs_max_pack_value)
  #pragma pack (push, __ghs_max_pack_value)
 #endif /* defined(__ghs_max_pack_value) */

 #endif /* _IS_GHS */

 #ifdef _GLOBAL_USING
_STD_BEGIN
 #if _IS_GHS
using _CSTD int8_t; using _CSTD int16_t;
using _CSTD int32_t;
using _CSTD uint8_t; using _CSTD uint16_t;
using _CSTD uint32_t;

using _CSTD int_least8_t; using _CSTD int_least16_t;
using _CSTD int_least32_t;
using _CSTD uint_least8_t; using _CSTD uint_least16_t;
using _CSTD uint_least32_t;

using _CSTD int_fast8_t; using _CSTD int_fast16_t;
using _CSTD int_fast32_t;
using _CSTD uint_fast8_t; using _CSTD uint_fast16_t;
using _CSTD uint_fast32_t;

 #else /* _IS_GHS */
using _CSTD int8_t; using _CSTD int16_t;
using _CSTD int32_t; using _CSTD int64_t;
using _CSTD uint8_t; using _CSTD uint16_t;
using _CSTD uint32_t; using _CSTD uint64_t;

using _CSTD int_least8_t; using _CSTD int_least16_t;
using _CSTD int_least32_t; using _CSTD int_least64_t;
using _CSTD uint_least8_t; using _CSTD uint_least16_t;
using _CSTD uint_least32_t; using _CSTD uint_least64_t;

using _CSTD int_fast8_t; using _CSTD int_fast16_t;
using _CSTD int_fast32_t; using _CSTD int_fast64_t;
using _CSTD uint_fast8_t; using _CSTD uint_fast16_t;
using _CSTD uint_fast32_t; using _CSTD uint_fast64_t;
 #endif /* _IS_GHS */

using _CSTD intmax_t; using _CSTD intptr_t;
using _CSTD uintmax_t; using _CSTD uintptr_t;

	namespace tr1 {
 #if _IS_GHS
using _CSTD int8_t; using _CSTD int16_t;
using _CSTD int32_t;
using _CSTD uint8_t; using _CSTD uint16_t;
using _CSTD uint32_t;

using _CSTD int_least8_t; using _CSTD int_least16_t;
using _CSTD int_least32_t;
using _CSTD uint_least8_t; using _CSTD uint_least16_t;
using _CSTD uint_least32_t;

using _CSTD int_fast8_t; using _CSTD int_fast16_t;
using _CSTD int_fast32_t;
using _CSTD uint_fast8_t; using _CSTD uint_fast16_t;
using _CSTD uint_fast32_t;

 #else /* _IS_GHS */
using _CSTD int8_t; using _CSTD int16_t;
using _CSTD int32_t; using _CSTD int64_t;
using _CSTD uint8_t; using _CSTD uint16_t;
using _CSTD uint32_t; using _CSTD uint64_t;

using _CSTD int_least8_t; using _CSTD int_least16_t;
using _CSTD int_least32_t; using _CSTD int_least64_t;
using _CSTD uint_least8_t; using _CSTD uint_least16_t;
using _CSTD uint_least32_t; using _CSTD uint_least64_t;

using _CSTD int_fast8_t; using _CSTD int_fast16_t;
using _CSTD int_fast32_t; using _CSTD int_fast64_t;
using _CSTD uint_fast8_t; using _CSTD uint_fast16_t;
using _CSTD uint_fast32_t; using _CSTD uint_fast64_t;
 #endif /* _IS_GHS */

using _CSTD intmax_t; using _CSTD intptr_t;
using _CSTD uintmax_t; using _CSTD uintptr_t;
	}	// namespace tr1
_STD_END
 #endif /* _GLOBAL_USING */

 #if _IS_GHS

 #if defined(__ghs_max_pack_value)
  #pragma pack(pop)
 #endif /* defined(__ghs_max_pack_value) */

 #if defined(__GHS_PRAGMAS)
  #pragma ghs enddata
  #pragma ghs end_cxx_lib_header
 #endif /* defined(__GHS_PRAGMAS) */

 #endif /* _IS_GHS */
#endif /* _CSTDINT_ */

/*
 * Copyright (c) by P.J. Plauger. All rights reserved.
 * Consult your license regarding permissions and restrictions.
V8.03a/17:1422 */
