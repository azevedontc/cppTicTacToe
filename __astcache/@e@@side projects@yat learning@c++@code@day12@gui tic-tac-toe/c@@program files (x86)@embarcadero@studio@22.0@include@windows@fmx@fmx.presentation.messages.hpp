// CodeGear C++Builder
// Copyright (c) 1995, 2022 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'FMX.Presentation.Messages.pas' rev: 35.00 (Windows)

#ifndef Fmx_Presentation_MessagesHPP
#define Fmx_Presentation_MessagesHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.Classes.hpp>

//-- user supplied -----------------------------------------------------------

namespace Fmx
{
namespace Presentation
{
namespace Messages
{
//-- forward type declarations -----------------------------------------------
template<typename T> struct TDispatchMessageWithValue__1;
class DELPHICLASS TMessageSender;
__interface DELPHIINTERFACE IMessageSendingCompatible;
typedef System::DelphiInterface<IMessageSendingCompatible> _di_IMessageSendingCompatible;
__interface DELPHIINTERFACE IMessageSender;
typedef System::DelphiInterface<IMessageSender> _di_IMessageSender;
//-- type declarations -------------------------------------------------------
typedef System::Word TMessageID;

// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> struct DECLSPEC_DRECORD TDispatchMessageWithValue__1
{
public:
	System::Word MsgID;
	T Value;
	__fastcall TDispatchMessageWithValue__1(const System::Word AMessageID, const T AValue);
	TDispatchMessageWithValue__1() {}
};


#ifndef _WIN64
#pragma pack(push,4)
#endif /* not _WIN64 */
class PASCALIMPLEMENTATION TMessageSender : public System::Classes::TPersistent
{
	typedef System::Classes::TPersistent inherited;
	
private:
	System::TObject* FReceiver;
	bool FNeedFreeReceiver;
	int FCanNotify;
	void __fastcall SetReceiver(System::TObject* const Value);
	
protected:
	virtual System::TObject* __fastcall CreateReceiver();
	virtual void __fastcall FreeReceiver();
	
public:
	__fastcall virtual TMessageSender()/* overload */;
	__fastcall virtual ~TMessageSender();
	bool __fastcall HasReceiver();
	void __fastcall SendMessage(const System::Word AMessageID)/* overload */;
	template<typename T> void __fastcall SendMessage(const System::Word AMessageID, const T AValue)/* overload */;
	template<typename T> void __fastcall SendMessageWithResult(const System::Word AMessageID, T &AValue);
	virtual void __fastcall DisableNotify();
	virtual void __fastcall EnableNotify();
	virtual bool __fastcall CanNotify();
	__property System::TObject* Receiver = {read=FReceiver, write=SetReceiver};
};

#ifndef _WIN64
#pragma pack(pop)
#endif /* not _WIN64 */

__interface  INTERFACE_UUID("{7777134E-CEC9-40F6-9AAA-CE4D6F55001A}") IMessageSendingCompatible  : public System::IInterface 
{
	virtual TMessageSender* __fastcall GetMessageSender() = 0 ;
	__property TMessageSender* MessageSender = {read=GetMessageSender};
};

__interface  INTERFACE_UUID("{64DD751B-91F5-4767-994F-2787E21ABEF2}") IMessageSender  _DEPRECATED_ATTRIBUTE1("Use IMessageSendingCompatible")  : public IMessageSendingCompatible 
{
	
};

//-- var, const, procedure ---------------------------------------------------
}	/* namespace Messages */
}	/* namespace Presentation */
}	/* namespace Fmx */
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_FMX_PRESENTATION_MESSAGES)
using namespace Fmx::Presentation::Messages;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_FMX_PRESENTATION)
using namespace Fmx::Presentation;
#endif
#if !defined(DELPHIHEADER_NO_IMPLICIT_NAMESPACE_USE) && !defined(NO_USING_NAMESPACE_FMX)
using namespace Fmx;
#endif
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// Fmx_Presentation_MessagesHPP
