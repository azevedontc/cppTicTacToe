// xstddef internal header
#ifndef _XSTDDEF_
#define _XSTDDEF_
#include <cstddef>
#include <cstdlib>
#include <xtr1common>

#include <initializer_list>

_STD_BEGIN
 #if _IS_GHS

 #if defined(__GHS_PRAGMAS)
  #pragma ghs start_cxx_lib_header
  #pragma ghs startdata
 #endif /* defined(__GHS_PRAGMAS) */

 #if defined(__ghs_max_pack_value)
  #pragma pack (push, __ghs_max_pack_value)
 #endif /* defined(__ghs_max_pack_value) */

#endif /* _IS_GHS */

 #if _HAS_CPP11
  #define _EQ_VOID	= void

 #else /* _HAS_CPP11 */
  #define _EQ_VOID
 #endif /* _HAS_CPP11 */

 #if !defined(_XSTD)
  #define _X_STD_BEGIN	_STD_BEGIN
  #define _X_STD_END	_STD_END
  #define _XSTD	_STD /* LEAVE SPACE */
 #endif /* !defined(_XSTD) */

		// EXCEPTION MACROS
 #ifndef _THROWS

 #if _HAS_NOEXCEPT
  #define _THROWS(x)

 #elif _HAS_CPP11
  #define _THROWS(x)	throw (x)

 #else /* _HAS_NOEXCEPT */
  #define _THROWS(x)
 #endif /* _HAS_NOEXCEPT */

 #endif /* _THROWS */

 #define _TRY_BEGIN	try {
 #define _CATCH(x)	} catch (x) {
 #define _CATCH_ALL	} catch (...) {
 #define _CATCH_END	}

 #define _RAISE(x)	throw x
 #define _RERAISE	throw

 #if _HAS_NOEXCEPT
  #define _THROW0()		noexcept

 #else /* _HAS_NOEXCEPT */
  #define _THROW0()		throw ()
 #endif /* _HAS_NOEXCEPT */

  #define _THROW1(x)	throw x

  #define _THROW(x, y)		throw x(y)
  #define _THROW_NCEE(x, y)	throw x(y)

 #if _IS_GHS
  // CHECK - May be able to remove this __ATTRIBUTES // _NOTHROW block

  #ifdef __ATTRIBUTES
   #define _NOTHROW	__attribute__((nothrow))

  #else /* defined __ATTRIBUTES */
   #define _NOTHROW
  #endif /* __ATTRIBUTES */

  // CHECK - May be able to remove _THROW0_NOTHROW
  // _THROW0_NOTHROW() is used for both C++11 and C++03, so
  // it's important that it use noexcept when available.
  #define _THROW0_NOTHROW()	_THROW0() _NOTHROW

#else /* _IS_GHS */
  #define _THROW0_NOTHROW()	throw() _NOTHROW
#endif /* _IS_GHS */

		// MISCELLANEOUS MACROS
#define _EMPTY_ARGUMENT		/* for empty macro argument */

		// BITMASK MACROS
 #define _BITMASK(Enum, Ty)	typedef Enum Ty

 #define _BITMASK_OPS(Ty) \
inline Ty& operator&=(Ty& _Left, Ty _Right) \
	{	/* return _Left &= _Right */ \
	_Left = (Ty)((int)_Left & (int)_Right); return (_Left); \
	} \
\
inline Ty& operator|=(Ty& _Left, Ty _Right) \
	{	/* return _Left |= _Right */ \
	_Left = (Ty)((int)_Left | (int)_Right); return (_Left); \
	} \
\
inline Ty& operator^=(Ty& _Left, Ty _Right) \
	{	/* return _Left ^= _Right */ \
	_Left = (Ty)((int)_Left ^ (int)_Right); return (_Left); \
	} \
\
inline _CONST_FUN Ty operator&(Ty _Left, Ty _Right) \
	{	/* return _Left & _Right */ \
	return ((Ty)((int)_Left & (int)_Right)); \
	} \
\
inline _CONST_FUN Ty operator|(Ty _Left, Ty _Right) \
	{	/* return _Left | _Right */ \
	return ((Ty)((int)_Left | (int)_Right)); \
	} \
\
inline _CONST_FUN Ty operator^(Ty _Left, Ty _Right) \
	{	/* return _Left ^ _Right */ \
	return ((Ty)((int)_Left ^ (int)_Right)); \
	} \
\
inline _CONST_FUN Ty operator~(Ty _Left) \
	{	/* return ~_Left */ \
	return ((Ty)~(int)_Left); \
	}

		// TYPE DEFINITIONS
template<bool,
	class _Ty1,
	class _Ty2>
	struct _If
	{	// type is _Ty2 for assumed false
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct _If<true, _Ty1, _Ty2>
	{	// type is _Ty1 for assumed true
	typedef _Ty1 type;
	};

template<class _Ty>
	struct _Always_false
		: false_type
	{	// false value that probably won't be optimized away
	};

 #ifndef _STATIC_ASSERT2
  #define _STATIC_ASSERT2(test, mesg)	\
	((void)_STD _Static_assert<test>(mesg))

template<bool>
	struct _Static_assert;	// leave false undefined

template<>
	struct _Static_assert<true>
	{	// assertion is met
	_Static_assert(const char *)
		{	// construct from message
		};
	};
 #endif /* _STATIC_ASSERT2 */

		//	FUNCTIONAL STUFF (from <functional>)
		// TEMPLATE STRUCT unary_function
template<class _Arg,
	class _Result>
	struct unary_function
	{	// base class for unary functions
	typedef _Arg argument_type;
	typedef _Result result_type;
	};

		// TEMPLATE STRUCT binary_function
template<class _Arg1,
	class _Arg2,
	class _Result>
	struct binary_function
	{	// base class for binary functions
	typedef _Arg1 first_argument_type;
	typedef _Arg2 second_argument_type;
	typedef _Result result_type;
	};

		// TEMPLATE STRUCT plus
template<class _Ty _EQ_VOID>
	struct plus
	{	// functor for operator+
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	_CONST_FUN _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	// apply operator+ to operands
		return (_Left + _Right);
		}
	};

		// TEMPLATE STRUCT minus
template<class _Ty _EQ_VOID>
	struct minus
	{	// functor for operator-
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	_CONST_FUN _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	// apply operator- to operands
		return (_Left - _Right);
		}
	};

		// TEMPLATE STRUCT multiplies
template<class _Ty _EQ_VOID>
	struct multiplies
	{	// functor for operator*
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	_CONST_FUN _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	// apply operator* to operands
		return (_Left * _Right);
		}
	};

		// TEMPLATE STRUCT equal_to
template<class _Ty _EQ_VOID>
	struct equal_to
	{	// functor for operator==
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	_CONST_FUN bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	// apply operator== to operands
		return (_Left == _Right);
		}
	};

		// TEMPLATE STRUCT less
template<class _Ty _EQ_VOID>
	struct less
	{	// functor for operator<
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	_CONST_FUN bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	// apply operator< to operands
		return (_Left < _Right);
		}
	};

 #if _HAS_CPP11
		// is_transparent MACHINERY
typedef int _Is_trans;	// type for is_transparent

		// TEMPLATE STRUCT SPECIALIZATION plus
template<>
	struct plus<void>
	{	// transparent functor for operator+
	typedef _Is_trans is_transparent;

	template<class _Ty1,
		class _Ty2>
		_CONST_FUN auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right))
		{	// transparently apply operator+ to operands
		return (static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right));
		}
	};

		// TEMPLATE STRUCT SPECIALIZATION minus
template<>
	struct minus<void>
	{	// transparent functor for operator-
	typedef _Is_trans is_transparent;

	template<class _Ty1,
		class _Ty2>
		_CONST_FUN auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right))
		{	// transparently apply operator- to operands
		return (static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right));
		}
	};

		// TEMPLATE STRUCT SPECIALIZATION multiplies
template<>
	struct multiplies<void>
	{	// transparent functor for operator*
	typedef _Is_trans is_transparent;

	template<class _Ty1,
		class _Ty2>
		_CONST_FUN auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right))
		{	// transparently apply operator* to operands
		return (static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right));
		}
	};

		// TEMPLATE STRUCT SPECIALIZATION equal_to
template<>
	struct equal_to<void>
	{	// transparent functor for operator==
	typedef _Is_trans is_transparent;

	template<class _Ty1,
		class _Ty2>
		_CONST_FUN auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right))
		{	// transparently apply operator== to operands
		return (static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right));
		}
	};

		// TEMPLATE STRUCT SPECIALIZATION less
template<>
	struct less<void>
	{	// transparent functor for operator<
	typedef _Is_trans is_transparent;

	template<class _Ty1,
		class _Ty2>
		_CONST_FUN auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right))
		{	// transparently apply operator< to operands
		return (static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right));
		}
	};

#define _FUNCTOR(func, iter)	func<>()

 #else /* _HAS_CPP11 */

 #if _IS_GHS
	struct __plus
	{
	template <class _ArgTy1, class _ArgTy2, class _RetTy = _ArgTy1>
	_RetTy operator()(_ArgTy1& _Left, _ArgTy2& _Right) const
		{
		return _Left + _Right;
		}
	  
	template <class _ArgTy1, class _ArgTy2, class _RetTy = _ArgTy1>
	_RetTy operator()(const _ArgTy1& _Left, const _ArgTy2& _Right) const
		{
		return _Left + _Right;
		}
	};

	struct __minus
	{
	template <class _ArgTy1, class _ArgTy2, class _RetTy = _ArgTy1>
	_RetTy operator()(_ArgTy1& _Left, _ArgTy2& _Right) const
		{
		return _Left - _Right;
		}
	  
	template <class _ArgTy1, class _ArgTy2, class _RetTy = _ArgTy1>
	_RetTy operator()(const _ArgTy1& _Left, const _ArgTy2& _Right) const
		{
		return _Left - _Right;
		}
	};

	struct __multiplies
	{
	template <class _ArgTy1, class _ArgTy2, class _RetTy = _ArgTy1>
	_RetTy operator()(_ArgTy1& _Left, _ArgTy2& _Right) const
		{
		return _Left * _Right;
		}
	  
	template <class _ArgTy1, class _ArgTy2, class _RetTy = _ArgTy1>
	_RetTy operator()(const _ArgTy1& _Left, const _ArgTy2& _Right) const
		{
		return _Left * _Right;
		}
	};

	struct __equal_to
	{
	template <class _ArgTy1, class _ArgTy2>
	bool operator()(_ArgTy1& _Left, _ArgTy2& _Right) const
		{
		return _Left == _Right;
		}

	template <class _ArgTy1, class _ArgTy2>
	bool operator()(const _ArgTy1& _Left, const _ArgTy2& _Right) const
		{
		return _Left == _Right;
		}
	};

	struct __less
	{
	template <class _ArgTy1, class _ArgTy2>
	bool operator()(_ArgTy1& _Left, _ArgTy2& _Right) const
		{
		return _Left < _Right;
		}
	  
	template <class _ArgTy1, class _ArgTy2>
	bool operator()(const _ArgTy1& _Left, const _ArgTy2& _Right) const
		{
		return _Left < _Right;
		}
	};

  /* The FUNCTOR versions of these classes should accept arbitrary types
     for each argument of their operator() member (e.g. like the C++14
     std::less<void>).  Note that this is different from std::less<T>, which
     pins the types of the operator() arguments to 'const T&'. */
#define _FUNCTOR_IMPL(func) template<class _Ty> inline \
	__ ## func _Functor_ ## func(_Ty *) \
		{return (__ ## func());}
#else /* _IS_GHS */
#define _FUNCTOR_IMPL(func) template<class _Ty> inline \
	func<_Ty> _Functor_ ## func(_Ty *) \
		{return (func<_Ty>());}
#endif /* _IS_GHS */

#define _FUNCTOR(func, iter)	_Functor_ ##func(_Val_type(iter))

_FUNCTOR_IMPL(plus)
_FUNCTOR_IMPL(minus)
_FUNCTOR_IMPL(multiplies)
_FUNCTOR_IMPL(equal_to)
_FUNCTOR_IMPL(less)
 #endif /* _HAS_CPP11 */
_STD_END

#ifndef _HASH_SEQ_DEFINED
#define _HASH_SEQ_DEFINED
namespace std {
	// FUNCTION _Hash_seq
inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
	{	// FNV-1a hash function for bytes in [_First, _First + _Count)
  #if defined(_M_X64) || defined(_LP64) || defined(__x86_64)
	_STATIC_ASSERT2(sizeof(size_t) == 8, "This code is for 64-bit size_t.");
	const size_t _FNV_offset_basis = 14695981039346656037ULL;
	const size_t _FNV_prime = 1099511628211ULL;

 #else /* defined(_M_X64), etc. */
	static_assert(sizeof(size_t) == 4, "This code is for 32-bit size_t.");
	const size_t _FNV_offset_basis = 2166136261U;
	const size_t _FNV_prime = 16777619U;
  #endif /* defined(_M_X64), etc. */

	size_t _Val = _FNV_offset_basis;
	for (size_t _Next = 0; _Next < _Count; ++_Next)
		{	// fold in another byte
		_Val ^= (size_t)_First[_Next];
		_Val *= _FNV_prime;
		}
	return (_Val);
	}

	// TEMPLATE STRUCT _Bitwise_hash
template<class _Kty>
	struct _Bitwise_hash
	{	// hash functor for plain old data
	typedef _Kty argument_type;
	typedef size_t result_type;

	size_t operator()(const _Kty& _Keyval) const
		{	// hash _Keyval to size_t value by pseudorandomizing transform
		return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
		}
	};

	// TEMPLATE STRUCT hash
template<class _Kty>
	struct hash
		: public _Bitwise_hash<_Kty>
	{	// hash functor for enums
	};
template<>
	struct hash<bool>
		: public _Bitwise_hash<bool>
	{	// hash functor for bool
	};

template<>
	struct hash<char>
		: public _Bitwise_hash<char>
	{	// hash functor for char
	};

template<>
	struct hash<signed char>
		: public _Bitwise_hash<signed char>
	{	// hash functor for signed char
	};

template<>
	struct hash<unsigned char>
		: public _Bitwise_hash<unsigned char>
	{	// hash functor for unsigned char
	};

template<>
	struct hash<char16_t>
		: public _Bitwise_hash<char16_t>
	{	// hash functor for char16_t
	};

template<>
	struct hash<char32_t>
		: public _Bitwise_hash<char32_t>
	{	// hash functor for char32_t
	};

template<>
	struct hash<wchar_t>
		: public _Bitwise_hash<wchar_t>
	{	// hash functor for wchar_t
	};

template<>
	struct hash<short>
		: public _Bitwise_hash<short>
	{	// hash functor for short
	};

template<>
	struct hash<unsigned short>
		: public _Bitwise_hash<unsigned short>
	{	// hash functor for unsigned short
	};

template<>
	struct hash<int>
		: public _Bitwise_hash<int>
	{	// hash functor for int
	};

template<>
	struct hash<unsigned int>
		: public _Bitwise_hash<unsigned int>
	{	// hash functor for unsigned int
	};

template<>
	struct hash<long>
		: public _Bitwise_hash<long>
	{	// hash functor for long
	};

template<>
	struct hash<unsigned long>
		: public _Bitwise_hash<unsigned long>
	{	// hash functor for unsigned long
	};

 #ifdef _LONGLONG
template<>
	struct hash<long long>
		: public _Bitwise_hash<long long>
	{	// hash functor for long long
	};

template<>
	struct hash<unsigned long long>
		: public _Bitwise_hash<unsigned long long>
	{	// hash functor for unsigned long long
	};
 #endif /* _LONGLONG */

 #if _IS_GHS
 #define _HAS_FLOAT	!defined(_NoFloat)

#else /* _IS_GHS */
 #define _HAS_FLOAT	1
#endif /* _IS_GHS */

 #if _HAS_FLOAT
template<>
	struct hash<float>
		: public _Bitwise_hash<float>
	{	// hash functor for float
	typedef float _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	// hash _Keyval to size_t value by pseudorandomizing transform
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	// map -0 to 0
		}
	};

template<>
	struct hash<double>
		: public _Bitwise_hash<double>
	{	// hash functor for double
	typedef double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	// hash _Keyval to size_t value by pseudorandomizing transform
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	// map -0 to 0
		}
	};

template<>
	struct hash<long double>
		: public _Bitwise_hash<long double>
	{	// hash functor for long double
	typedef long double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	// hash _Keyval to size_t value by pseudorandomizing transform
		_Kty _Temp = _Keyval == 0 ? 0 : _Keyval;	/* map -0 to 0 */

 #if defined(__i386) || defined(__x86_64)	/* compiler test */
		unsigned char *_Pyt = (unsigned char *)&_Temp;
		for (size_t _Idx = 10; _Idx < sizeof (long double); ++_Idx)
			_Pyt[_Idx] = 0;	// zero out any padding bytes
 #endif /* defined(__i386), etc. */

		return (_Mybase::operator()(_Temp));
		}
	};

template<class _Ty>
	struct hash<_Ty *>
		: public _Bitwise_hash<_Ty *>
	{	// hash functor for _Ty *
	};
 #endif /* _HAS_FLOAT */

	// TEMPLATE STRUCT default_order
template<class _Ty = void>
	struct default_order
	{	// default ordering predicate
	using type = less<_Ty>;
	};

template<class _Ty = void>
	using default_order_t = typename default_order<_Ty>::type;
}	// namespace std

 #if 0 < _ALT_NS
_STD_BEGIN
using std::default_order;
using std::default_order_t;
using std::hash;
using std::_Hash_seq;
_STD_END
 #endif /* 0 < _ALT_NS */

#endif /* _HASH_SEQ_DEFINED */

_STD_BEGIN
namespace tr1 {	// TR1 ADDITIONS
using _STD hash;
}	// namespace tr1
_STD_END

#if defined(__CODEGEARC__) && defined(__clang__) && defined(__i386__)

// clang supports the following calling conventions and functions with them
// will have a different function type on 32-bit x86 targets.

#define _MEMBER_CALL(FUNC, CV_OPT, REF_OPT) \
	FUNC(__cdecl, CV_OPT, REF_OPT) \
	FUNC(__fastcall, CV_OPT, REF_OPT) \
	FUNC(__stdcall, CV_OPT, REF_OPT)

#define _MEMBER_CALL_CV(FUNC, REF_OPT) \
	_MEMBER_CALL(FUNC, , REF_OPT) \
	_MEMBER_CALL(FUNC, const, REF_OPT) \
	_MEMBER_CALL(FUNC, volatile, REF_OPT) \
	_MEMBER_CALL(FUNC, const volatile, REF_OPT)

#define _NON_MEMBER_CALL(FUNC) \
	FUNC(__cdecl) \
	FUNC(__fastcall) \
	FUNC(__stdcall)

#else /* defined(__CODEGEARC__) && defined(__clang__) && defined(__i386__) */

#define _MEMBER_CALL_CV(FUNC, REF_OPT) \
	FUNC(, , REF_OPT) \
	FUNC(, const, REF_OPT) \
	FUNC(, volatile, REF_OPT) \
	FUNC(, const volatile, REF_OPT)

#define _NON_MEMBER_CALL(FUNC) \
	FUNC(_EMPTY_ARGUMENT)

#endif /* defined(__CODEGEARC__) && defined(__clang__) && defined(__i386__) */ 


 #if _IS_GHS
 #define _NON_MEMBER_CALL_CV(FUNC, REF_OPT) \
	FUNC(, , REF_OPT) \
	FUNC(, const, REF_OPT) \
	FUNC(, volatile, REF_OPT) \
	FUNC(, const volatile, REF_OPT)
#endif /* _IS_GHS */

 #if _HAS_REF_QUALIFIER
#define _MEMBER_CALL_CV_REF(FUNC) \
	_MEMBER_CALL_CV(FUNC, ) \
	_MEMBER_CALL_CV(FUNC, &) \
	_MEMBER_CALL_CV(FUNC, &&)

 #if _IS_GHS
#define _NON_MEMBER_CALL_CV_REF(FUNC) \
	_NON_MEMBER_CALL_CV(FUNC, ) \
	_NON_MEMBER_CALL_CV(FUNC, &) \
	_NON_MEMBER_CALL_CV(FUNC, &&)
#endif /* _IS_GHS */

 #else /* _HAS_REF_QUALIFIER */
#define _MEMBER_CALL_CV_REF(FUNC) \
	_MEMBER_CALL_CV(FUNC, )

 #if _IS_GHS
#define _NON_MEMBER_CALL_CV_REF(FUNC) \
	_NON_MEMBER_CALL_CV(FUNC, )
#endif /* _IS_GHS */

 #endif /* _HAS_REF_QUALIFIER */

#define _CLASS_DEFINE_CONST(CLASS) \
	CLASS(_EMPTY_ARGUMENT) \
	CLASS(const)

#define _CLASS_DEFINE_CV(CLASS) \
	CLASS(_EMPTY_ARGUMENT) \
	CLASS(const) \
	CLASS(volatile) \
	CLASS(const volatile)

 #if _HAS_REF_QUALIFIER
#define _CLASS_DEFINE_CV_REF(CLASS) \
	CLASS( , ) \
	CLASS(const, ) \
	CLASS(volatile, ) \
	CLASS(const volatile, ) \
	CLASS( , &) \
	CLASS(const, &) \
	CLASS(volatile, &) \
	CLASS(const volatile, &) \
	CLASS( , &&) \
	CLASS(const, &&) \
	CLASS(volatile, &&) \
	CLASS(const volatile, &&)

 #else /* _HAS_REF_QUALIFIER */
#define _CLASS_DEFINE_CV_REF(CLASS) \
	CLASS( , ) \
	CLASS(const, ) \
	CLASS(volatile, ) \
	CLASS(const volatile, )
 #endif /* _HAS_REF_QUALIFIER */

#define _COMMA	,	/* for immediate commas in macro parameters */

_STD_BEGIN
	// TEMPLATE CLASS _Arg_types
template<class... _Types>
	struct _Arg_types
	{	// provide argument_type, etc. (sometimes)
	};

template<class _Ty1>
	struct _Arg_types<_Ty1>
	{	// provide argument_type, etc. (sometimes)
	typedef _Ty1 argument_type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Arg_types<_Ty1, _Ty2>
	{	// provide argument_type, etc. (sometimes)
	typedef _Ty1 first_argument_type;
	typedef _Ty2 second_argument_type;
	};

	// TEMPLATE CLASS is_function
template<class _Ty>
	struct _Is_function
	{	// determine whether _Ty is a function
	typedef false_type _Bool_type;
	};

 #if _IS_GHS
#define _IS_FUNCTION(CALL_OPT, CV_OPT, REF_OPT) \
template<class _Ret, \
	class... _Types> \
	struct _Is_function<_Ret CALL_OPT (_Types...) CV_OPT REF_OPT> \
		: _Arg_types<_Types...> \
	{	/* determine whether _Ty is a function */ \
	typedef true_type _Bool_type; \
	typedef _Ret result_type; \
	};

_NON_MEMBER_CALL_CV_REF(_IS_FUNCTION)
#undef _IS_FUNCTION

#define _IS_FUNCTION(CALL_OPT, CV_OPT, REF_OPT) \
template<class _Ret, \
	class... _Types> \
	struct _Is_function<_Ret CALL_OPT (_Types..., ...) CV_OPT REF_OPT> \
		: _Arg_types<_Types...> \
	{	/* determine whether _Ty is a function */ \
	typedef true_type _Bool_type; \
	typedef _Ret result_type; \
	};
_NON_MEMBER_CALL_CV_REF(_IS_FUNCTION)
#undef _IS_FUNCTION

#else /* _IS_GHS */
#define _IS_FUNCTION(CALL_OPT) \
template<class _Ret, \
	class... _Types> \
	struct _Is_function<_Ret CALL_OPT (_Types...)> \
		: _Arg_types<_Types...> \
	{	/* determine whether _Ty is a function */ \
	typedef true_type _Bool_type; \
	typedef _Ret result_type; \
	};

_NON_MEMBER_CALL(_IS_FUNCTION)
#undef _IS_FUNCTION
#endif /* _IS_GHS */

template<class _Ret,
	class... _Types>
	struct _Is_function<_Ret (_Types..., ...)>
	{	// no calling conventions for ellipsis
	typedef true_type _Bool_type;
	typedef _Ret result_type;
	};

template<class _Ty>
	struct is_function
		: _Is_function<_Ty>::_Bool_type
	{	// determine whether _Ty is a function
	};

		// TEMPLATE FUNCTION addressof
template<class _Ty> inline
	_Ty *_Addressof(_Ty& _Val, true_type) _NOEXCEPT
	{	// return address of function _Val
	return (_Val);
	}

template<class _Ty> inline
	_Ty *_Addressof(_Ty& _Val, false_type) _NOEXCEPT
	{	// return address of object _Val
	return (reinterpret_cast<_Ty *>(
		&const_cast<char&>(
		reinterpret_cast<const volatile char&>(_Val))));
	}

template<class _Ty> inline
	_Ty *addressof(_Ty& _Val) _NOEXCEPT
	{	// return address of _Val
	return (_Addressof(_Val, is_function<_Ty>()));
	}

 #if _IS_GHS

 #if defined(__ghs_max_pack_value)
  #pragma pack(pop)
 #endif /* defined(__ghs_max_pack_value) */

 #if defined(__GHS_PRAGMAS)
  #pragma ghs enddata
  #pragma ghs end_cxx_lib_header
 #endif /* defined(__GHS_PRAGMAS) */

#endif /* _IS_GHS */
_STD_END
#endif /* _XSTDDEF_ */

/*
 * Copyright (c) by P.J. Plauger. All rights reserved.
 * Consult your license regarding permissions and restrictions.
 * V8.05/17:1422 */
